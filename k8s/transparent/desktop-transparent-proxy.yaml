apiVersion: v1
kind: ConfigMap
metadata:
  name: xray-transparent-config
data:
  config.json: |
    {
      "log": {
        "loglevel": "warning"
      },
      "inbounds": [
        {
          "port": 12345,
          "protocol": "dokodemo-door",
          "settings": {
            "network": "tcp,udp",
            "followRedirect": true
          },
          "sniffing": {
            "enabled": true,
            "destOverride": ["http", "tls", "quic"]
          },
          "streamSettings": {
            "sockopt": {
              "tproxy": "tproxy"
            }
          },
          "tag": "transparent"
        },
        {
          "port": 1080,
          "protocol": "socks",
          "settings": {
            "auth": "noauth",
            "udp": true,
            "ip": "127.0.0.1"
          },
          "sniffing": {
            "enabled": true,
            "destOverride": ["http", "tls"]
          }
        },
        {
          "port": 8080,
          "protocol": "http",
          "settings": {
            "timeout": 300
          }
        }
      ],
      "outbounds": [
        {
          "protocol": "vmess",
          "settings": {
            "vnext": [
              {
                "address": "your-vmess-server.com",
                "port": 443,
                "users": [
                  {
                    "id": "your-uuid-here",
                    "alterId": 0,
                    "security": "auto"
                  }
                ]
              }
            ]
          },
          "streamSettings": {
            "network": "ws",
            "security": "tls",
            "wsSettings": {
              "path": "/path",
              "headers": {
                "Host": "your-vmess-server.com"
              }
            }
          },
          "tag": "proxy"
        },
        {
          "protocol": "freedom",
          "tag": "direct"
        }
      ],
      "routing": {
        "rules": [
          {
            "type": "field",
            "inboundTag": ["transparent"],
            "outboundTag": "proxy"
          },
          {
            "type": "field",
            "ip": [
              "geoip:private"
            ],
            "outboundTag": "direct"
          },
          {
            "type": "field",
            "domain": [
              "geosite:cn"
            ],
            "outboundTag": "direct"
          },
          {
            "type": "field",
            "network": "tcp,udp",
            "outboundTag": "proxy"
          }
        ]
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: beagle-desktop-transparent
  labels:
    app: beagle-desktop-transparent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: beagle-desktop-transparent
  template:
    metadata:
      labels:
        app: beagle-desktop-transparent
    spec:
      containers:
      - name: desktop
        image: registry.cn-qingdao.aliyuncs.com/wod/beagle-wind-vnc:nvidia-egl-desktop-1.0.9
        env:
        - name: TZ
          value: "Asia/Shanghai"
        - name: DISPLAY_SIZEW
          value: "1920"
        - name: DISPLAY_SIZEH
          value: "1080"
        - name: DISPLAY_REFRESH
          value: "60"
        - name: DISPLAY_DPI
          value: "96"
        - name: DISPLAY_CDEPTH
          value: "24"
        - name: PASSWD
          value: "GB8PJZL6IuH5"
        - name: SELKIES_ENCODER
          value: "nvh264enc"
        - name: SELKIES_VIDEO_BITRATE
          value: "4000"
        - name: SELKIES_FRAMERATE
          value: "30"
        - name: SELKIES_AUDIO_BITRATE
          value: "24000"
        - name: SELKIES_ENABLE_RESIZE
          value: "true"
        - name: SELKIES_BASIC_AUTH_PASSWORD
          value: "GB8PJZL6IuH5"
        - name: SELKIES_ENABLE_HTTPS
          value: "false"
        ports:
        - containerPort: 8080
          name: web
        - containerPort: 8081
          name: webrtc
        resources:
          limits:
            nvidia.com/gpu: 1
          requests:
            nvidia.com/gpu: 1
        volumeMounts:
        - name: desktop-data
          mountPath: /home/ubuntu
        - name: nvidia-driver
          mountPath: /data/nvidia
        - name: transparent-proxy-script
          mountPath: /tmp/transparent-proxy-setup.sh
          subPath: transparent-proxy-setup.sh
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_RAWIO
            - NET_ADMIN
            - NET_RAW
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                sleep 10
                /tmp/transparent-proxy-setup.sh
      - name: xray
        image: ghcr.io/xtls/xray-core:latest
        args:
        - run
        - -c
        - /etc/xray/config.json
        ports:
        - containerPort: 12345
          name: transparent
        - containerPort: 1080
          name: socks5
        - containerPort: 8080
          name: http-proxy
        volumeMounts:
        - name: xray-transparent-config
          mountPath: /etc/xray
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
      volumes:
      - name: xray-transparent-config
        configMap:
          name: xray-transparent-config
      - name: transparent-proxy-script
        configMap:
          name: transparent-proxy-script
      - name: desktop-data
        persistentVolumeClaim:
          claimName: desktop-pvc
      - name: nvidia-driver
        hostPath:
          path: /usr/lib/x86_64-linux-gnu
          type: Directory
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: transparent-proxy-script
data:
  transparent-proxy-setup.sh: |
    #!/bin/bash
    
    # 透明代理设置脚本
    # 配置iptables规则实现透明代理
    
    set -e
    
    echo "Setting up transparent proxy..."
    
    # 等待XRay启动
    echo "Waiting for XRay to be ready..."
    until nc -z localhost 12345; do
      echo "Waiting for XRay transparent proxy on port 12345..."
      sleep 2
    done
    
    echo "XRay is ready!"
    
    # 创建新的iptables链
    iptables -t nat -N XRAY_TCP 2>/dev/null || true
    iptables -t mangle -N XRAY_TCP 2>/dev/null || true
    iptables -t mangle -N XRAY_UDP 2>/dev/null || true
    
    # 清空现有规则
    iptables -t nat -F XRAY_TCP
    iptables -t mangle -F XRAY_TCP
    iptables -t mangle -F XRAY_UDP
    
    # 设置TCP透明代理规则
    echo "Setting up TCP transparent proxy rules..."
    
    # 跳过本地地址
    iptables -t nat -A XRAY_TCP -d 0.0.0.0/8 -j RETURN
    iptables -t nat -A XRAY_TCP -d 10.0.0.0/8 -j RETURN
    iptables -t nat -A XRAY_TCP -d 127.0.0.0/8 -j RETURN
    iptables -t nat -A XRAY_TCP -d 169.254.0.0/16 -j RETURN
    iptables -t nat -A XRAY_TCP -d 172.16.0.0/12 -j RETURN
    iptables -t nat -A XRAY_TCP -d 192.168.0.0/16 -j RETURN
    iptables -t nat -A XRAY_TCP -d 224.0.0.0/4 -j RETURN
    iptables -t nat -A XRAY_TCP -d 240.0.0.0/4 -j RETURN
    
    # 跳过XRay代理端口
    iptables -t nat -A XRAY_TCP -p tcp --dport 12345 -j RETURN
    iptables -t nat -A XRAY_TCP -p tcp --dport 1080 -j RETURN
    iptables -t nat -A XRAY_TCP -p tcp --dport 8080 -j RETURN
    
    # 重定向TCP流量到XRay
    iptables -t nat -A XRAY_TCP -p tcp -j REDIRECT --to-ports 12345
    
    # 设置mangle表规则（用于TPROXY）
    echo "Setting up mangle table rules..."
    
    # 跳过本地地址
    iptables -t mangle -A XRAY_TCP -d 0.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 10.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 127.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 169.254.0.0/16 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 172.16.0.0/12 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 192.168.0.0/16 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 224.0.0.0/4 -j RETURN
    iptables -t mangle -A XRAY_TCP -d 240.0.0.0/4 -j RETURN
    
    # 跳过XRay代理端口
    iptables -t mangle -A XRAY_TCP -p tcp --dport 12345 -j RETURN
    iptables -t mangle -A XRAY_TCP -p tcp --dport 1080 -j RETURN
    iptables -t mangle -A XRAY_TCP -p tcp --dport 8080 -j RETURN
    
    # 标记TCP流量
    iptables -t mangle -A XRAY_TCP -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1
    
    # 设置UDP透明代理规则
    echo "Setting up UDP transparent proxy rules..."
    
    # 跳过本地地址
    iptables -t mangle -A XRAY_UDP -d 0.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 10.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 127.0.0.0/8 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 169.254.0.0/16 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 172.16.0.0/12 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 192.168.0.0/16 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 224.0.0.0/4 -j RETURN
    iptables -t mangle -A XRAY_UDP -d 240.0.0.0/4 -j RETURN
    
    # 跳过XRay代理端口
    iptables -t mangle -A XRAY_UDP -p udp --dport 12345 -j RETURN
    iptables -t mangle -A XRAY_UDP -p udp --dport 1080 -j RETURN
    iptables -t mangle -A XRAY_UDP -p udp --dport 8080 -j RETURN
    
    # 标记UDP流量
    iptables -t mangle -A XRAY_UDP -p udp -j TPROXY --on-port 12345 --tproxy-mark 1
    
    # 将链添加到PREROUTING
    iptables -t nat -A PREROUTING -p tcp -j XRAY_TCP
    iptables -t mangle -A PREROUTING -p tcp -j XRAY_TCP
    iptables -t mangle -A PREROUTING -p udp -j XRAY_UDP
    
    # 设置路由规则
    echo "Setting up routing rules..."
    
    # 创建路由表
    echo "200 xray" >> /etc/iproute2/rt_tables 2>/dev/null || true
    
    # 添加路由规则
    ip rule add fwmark 1 table xray 2>/dev/null || true
    ip route add local 0.0.0.0/0 dev lo table xray 2>/dev/null || true
    
    # 配置DNS
    echo "Configuring DNS..."
    
    # 备份原始DNS配置
    cp /etc/resolv.conf /etc/resolv.conf.backup
    
    # 设置DNS服务器（使用公共DNS）
    cat > /etc/resolv.conf << EOF
    nameserver 8.8.8.8
    nameserver 8.8.4.4
    nameserver 1.1.1.1
    EOF
    
    # 测试透明代理
    echo "Testing transparent proxy..."
    
    # 测试TCP连接
    if curl -s -o /dev/null -w "%{http_code}" https://www.google.com | grep -q "200"; then
      echo "✅ TCP transparent proxy is working!"
    else
      echo "⚠️  TCP transparent proxy test failed"
    fi
    
    # 测试DNS解析
    if nslookup google.com >/dev/null 2>&1; then
      echo "✅ DNS resolution is working!"
    else
      echo "⚠️  DNS resolution test failed"
    fi
    
    echo "Transparent proxy setup completed!"
---
apiVersion: v1
kind: Service
metadata:
  name: beagle-desktop-transparent-service
spec:
  selector:
    app: beagle-desktop-transparent
  ports:
  - name: web
    port: 8080
    targetPort: 8080
  - name: webrtc
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: desktop-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi 